---
config:
  theme: redux
  look: handDrawn
  layout: fixed
---
flowchart TB
 subgraph Frontend_UI["Frontend Web"]
        A1["Component A1"]
        A2["Component A2"]
        Login["Login Page"]
        Dashboard["Dashboard"]
  end
 subgraph Security["Security"]
        AuthN["Authentication (JWT)"]
        AuthZ["Authorization (RBAC)"]
        OAuth["OAuth2 (optional)"]
  end
 subgraph Microservices["Microservices"]
        S1["Service 1: Data Handler (PostgreSQL)"]
        S2["Service 2: Data Handler (PostgreSQL + Replica)"]
        S3["Event Sender (Audit Log)"]
        S4["Logger Service (to DBLogs)"]
        S5["Exec Service (Event Driven Logic)"]
  end
 subgraph ExecLogic["ExecLogic"]
        L1["Event Listener"]
        L2["Validate Data"]
        L3["Trigger Action"]
        L4["Send Failure Event"]
  end
 subgraph Databases["Databases"]
        DB1["(DB 1 - PostgreSQL)"]
        DB2["(DB 2 - PostgreSQL + Read Replica)"]
        DB3["(DB 3 - Audit/NoSQL optional)"]
        DBLogs["(Log DB - SQLite or PostgreSQL)"]
        AuditDB["(Optional Audit Trail DB)"]
        ReadReplicas["(Optional Read Replicas)"]
  end
 subgraph Automation["Automation"]
        EventBus["Event Bus (e.g. Node/Redis)"]
        Workflow["Internal Workflow Logic"]
        EventStore["(Optional Event Store)"]
        SchemaReg["(Optional Schema Registry)"]
  end
 subgraph Saga["Saga"]
        SagaStart["Saga Start"]
        SagaStep1["Step 1: Payment"]
        SagaStep2["Step 2: Shipping"]
        SagaFail["Compensate on Failure"]
  end
 subgraph Monitoring["Monitoring"]
        LogService["Logging (Winston/Pino)"]
        Alerts["Alerts (Email/Slack)"]
        Tracing["Tracing (optional)"]
        Health["Health Check"]
  end
 subgraph Errors["Errors"]
        Retry["Retry (custom or npm retry)"]
        Timeout["Timeout Handling"]
        CBreaker["Circuit Breaker (opossum)"]
        DLQ["Dead Letter Queue (internal)"]
  end
 subgraph CICD["CICD Optional"]
        Pipeline["Build & Test Pipeline"]
        Staging["Staging Environment"]
        BlueGreen["Blue/Green Deployment"]
  end
    A1 --> Gateway["API Gateway"]
    A2 --> Gateway
    Login --> Gateway
    Dashboard --> Gateway
    Gateway --> AuthN & S1 & S2 & S3 & S4
    AuthN --> AuthZ & OAuth
    S1 --> DB1 & Tracing
    S2 --> DB2 & ReadReplicas & Tracing
    S3 --> DB3 & AuditDB & EventStore & SchemaReg & LogService & Tracing
    S4 --> DBLogs & EventStore & SchemaReg & LogService & Tracing
    EventBus --> L1 & Workflow
    L1 --> L2
    L2 --> L3
    L3 --> L4 & LogService
    L4 --> DLQ
    DBLogs --> EventBus
    SagaStart --> SagaStep1
    SagaStep1 --> SagaStep2 & LogService & Retry
    SagaStep1 -- Fail --> SagaFail
    SagaStep2 --> LogService
    LogService --> Alerts
    AllServices(("All Services")) --> Health
    Retry --> Timeout
    Timeout --> CBreaker
    CBreaker --> DLQ
    Pipeline --> Staging
    Staging --> BlueGreen
    n7[" "] x--x n1@{ label: "<span style=\"font-family:\">API Gateway:<br>Routing aller Requests (nur über Gateway)</span><br style=\"--tw-scale-x:\"><span style=\"font-family:\">Authentifizierung (JWT Token Handling)</span><br style=\"--tw-scale-x:\"><span style=\"font-family:\">Authorization Checks (z. B. Rollen, Claims)</span><br style=\"--tw-scale-x:\"><span style=\"font-family:\">Optional: Rate Limiting, IP Whitelisting</span><br style=\"--tw-scale-x:\"><span style=\"font-family:\">Logging + Monitoring Einstiegspunkt</span><br style=\"--tw-scale-x:\"><span style=\"font-family:\">Kein direkter Zugriff auf Services ohne Prüfung</span><br style=\"--tw-scale-x:\"><span style=\"font-family:\">erweiterbar</span>" }
    NoteFrontend["Frontend UI (React-basiert): <br>React + Vite + TailwindCSS-
<br>Zustand für State-Management- <br>Routing: React Router- <br>Auth über Gateway (kein direkter Datenzugriff)- <br>Modular: Login, Dashboard, A1, A2- <br>Testing: Jest + React Testing Library- <br>Optional bei Skalierung: Redux Toolkit, i18n, A/B Testing"] x--x n6[" "]
    n8[" "] --> n9[" "]
    n11[" "] x--x n12[" "]
    n14[" "] x--x n15[" "]
    n17[" "] x--x n18[" "]
    n20[" "] x--x n21[" "]
    n2@{ label: "<p class=\"p1\" style=\"font-variant-numeric:\">Security Layer</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Authentication (AuthN)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Nutzer-Login über API Gateway, nicht direkt im Service</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Token-Based Authentifizierung mittels JWT (JSON Web Token)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Token wird nach erfolgreichem Login erzeugt und über HTTP-Header (Authorization: Bearer &lt;token&gt;) gesendet</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Tokens sind kurzlebig (z. B. 15min) – (Refresh Token optional implementierbar)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Authorization (AuthZ)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Zugriffskontrolle erfolgt per Role-Based Access Control (RBAC)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Rollen z. B.: Assignee, HR, Admin, Consultant, Finanz, Berater usw.</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Optional erweiterbar mit Attribute-Based Access Control (ABAC) – z. B. je nach Land, Case-Typ oder Kundenzugehörigkeit</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Token Handling (Unsere Practices)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Keine Speicherung im localStorage, nur im Memory oder Secure Cookie</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Tokens werden nicht im Frontend decodiert, sondern validiert über Gateway</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Nutzung von JWT Claims für Entscheidung auf Gateway-Ebene (z. B. erlaubte Actions)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>OAuth2 / OpenID Connect (Optional)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Bei externen Zugängen (z. B. SSO mit Unternehmens-IDP)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Integration über Standard-Provider wie Google, Microsoft, Okta</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Gateway übernimmt Callback, Token-Austausch und Session Management</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Transport-Sicherheit</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Alle Services über HTTPS erreichbar</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Strict Transport Security (HSTS), CORS mit (Whitelisting)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•(OWASP Top 10)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Input Validation (XSS, SQL Injection etc.) im Gateway + Service</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Rate Limiting (Anti Brute Force)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>HTTP Security Header: helmet.js, CSP, Referrer-Policy</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Logging und Monitoring aller Auth-Fälle mit Alert-Option bei ungewöhnlichem Verhalten</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Sicherheit im Deployment</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Secrets (z. B. JWT Keys) werden nicht im Code gespeichert</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Verwendung von .env oder Secret Manager (z. B. Vault, Doppler)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Logs enthalten keine sensitiven Daten (z. B. Passwörter, Token)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Zukunftssicher (Skalierbar)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Multi-Tenant-Architektur möglich (mit Mandantenfilterung auf Token-Level)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>MFA (zwei Faktor Authentifizierung) optional integrierbar</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Trennung von technischen und menschlichen Usern (API Keys vs JWT)</p>" }
    n10@{ label: "<p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Grundprinzipien</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Jeder Service hat eine klar definierte Verantwortung (Single Responsibility Principle)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Services sind entkoppelt und modular – können unabhängig entwickelt, deployed und skaliert werden</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Kommunikation erfolgt über REST oder EventBus (async), niemals per direkter Datenbankzugriff</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Technologie-Stack</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Programmiersprache: Node.js (Express oder NestJS je nach Komplexität)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Kommunikation: REST (HTTP + JSON), alternativ Message-basiert (z. B. Redis Pub/Sub oder RabbitMQ)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Datenzugriff: ORM/Query Builder wie Prisma, TypeORM, Sequelize</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Containerisierung möglich (z. B. Docker), aber nicht Pflicht im MVP</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Datenhaltung</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Jeder Microservice besitzt seine eigene Datenbank</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Kein Cross-Service-SQL → Datenzugriffe erfolgen ausschließlich über APIs oder Events</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Services können Read Replicas nutzen (CQRS-Prinzip optional)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Zugriffslogik</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Zugriff erfolgt immer über Gateway mit AuthZ</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Jeder Service prüft zusätzlich selbstständig die Zugriffsrechte (z. B. mit JWT Claims)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Kein direkter Zugriff von außen oder vom Frontend</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Fehlerbehandlung</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Jeder Service implementiert Retry-Logik, Timeout und optional Circuit Breaker (opossum)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Fehlerhafte Events oder Requests werden in eine interne DLQ (Dead Letter Queue) verschoben</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Logs werden zentral weitergeleitet (z. B. via LogService)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Deployment-Strategie</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Deployment unabhängig je Service möglich</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Möglichkeit für Blue/Green Deployments, wenn CI/CD aktiv ist</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Versionierung über URL (z. B. /api/v1/service-a) oder API Contracts</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Testbarkeit &amp; Wartung</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Jeder Service ist unit-testbar, isoliert</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Integrationstests über Mocking von Events und DBs</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Health Checks und Monitoring Hooks eingebaut (z. B. /health, Prometheus Hooks)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Skalierbarkeit &amp; Erweiterbarkeit</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Horizontal skalierbar je Service (z. B. wenn Service 3 viel Traffic hat)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Services können nach Domänen gruppiert werden → später DDD möglich</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Leichte Migration möglich dank lose Kopplung</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Sicherheitsaspekte</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Services akzeptieren nur signierte Tokens über Gateway</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Zugriff nur über interne Ports (nicht direkt exposed)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Kein direkter Zugriff auf externe Systeme ohne Validierung</p>" }
    n13@{ label: "<p class=\"p1\" style=\"font-variant-numeric:\">Datenbanken<span class=\"Apple-converted-space\"></span></p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Jeder Microservice hat eine eigene, vollständig getrennte Datenbank</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Keine direkten Cross-DB-Zugriffe – alle Fremddaten werden über APIs oder Events geholt</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Die Datenbankstruktur pro Service ist auf dessen Domäne optimiert (z. B. Immigration vs. HR)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Datenzugriffslogik ist im Service selbst gekapselt, nie im Frontend oder Gateway</p><p class=\"p1\" style=\"font-variant-numeric:\">Technologien &amp; Varianten</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>PostgreSQL: Standard für relationale Daten, zuverlässig und transaktionssicher</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>MongoDB (optional): Nur wenn dynamische oder dokumentbasierte Daten gebraucht werden</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>SQLite oder leichte PostgreSQL-Instanz: Für Logs und temporäre Daten</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Redis (optional): Für Session- oder Warteschlangenspeicherung</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Audit-Trail-Datenbank (optional): Für DSGVO-konformes Änderungs-Tracking</p><p class=\"p1\" style=\"font-variant-numeric:\">Sicherheitsaspekte</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Jeder Service hat eigene DB-User und Zugriffsrechte</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Keine Root-Zugänge im Deployment</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Verbindungen idealerweise TLS-verschlüsselt</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Backups verschlüsselt und regelmäßig durchgeführt</p><p class=\"p1\" style=\"font-variant-numeric:\">Was explizit vermieden wird</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Kein gemeinsames Schema für mehrere Services</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Kein JOIN über mehrere Datenbanken hinweg</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Kein direkter Schreib-/Lesezugriff zwischen Services über die DB</p><p class=\"p1\" style=\"font-variant-numeric:\">Best Practices &amp; Erweiterbarkeit</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Backup &amp; Restore-Strategien sind Pflicht – idealerweise automatisiert (z. B. täglich)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Eventual Consistency über Events – nicht über direkte Synch-Abfragen</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Read Replicas einsetzbar bei hohem Lese-Traffic</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Audit-Trail aktivieren, sobald rechtliche Nachvollziehbarkeit wichtig wird</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Schema-Änderungen sind Versionierbar durch Migrationsskripte (z. B. Prisma, ???)</p>" }
    n16@{ label: "<p class=\"p1\" style=\"font-variant-numeric:\">Automatisierungsschicht – Event-Base- System</p><p class=\"p2\" style=\"font-variant-numeric:\"><br></p><p class=\"p1\" style=\"font-variant-numeric:\">Event Bus (zentraler Nachrichtenverteiler)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Dient als zentrale Instanz, um Events zwischen Microservices zu übermitteln</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Services senden Events, wenn relevante Aktionen stattfinden (z. B. „Dokument geprüft“)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Andere Services können diese Events abonnieren und asynchron darauf reagieren</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Implementierbar über leichtgewichtige Lösungen wie Node.js mit Redis Pub/Sub</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Events enthalten nur nötige Payload – kein direkter DB-Zugriff erlaubt</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Der Event Bus ist nicht geschäftslogikführend, sondern nur Infrastruktur</p><p class=\"p1\" style=\"font-variant-numeric:\">Workflow Engine (Prozess-Logik-Koordinator)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Übernimmt die Verkettung von Prozessschritten, z. B. bei langen Workflows wie Visa-Prozessen</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Wird durch Events ausgelöst (z. B. Start bei „Antrag eingereicht“)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Kann weitere Events erzeugen, Tasks triggern oder Timeout-Aktionen durchführen</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Leichtgewichtig implementierbar mit einem internen Orchestrator (kein Camunda nötig!)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Ermöglicht Zustandsbeobachtung (welcher Schritt ist erreicht?) durch Logging &amp; Statusspeicher</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Optional: Unterstützung für manuelle Aufgaben oder „Wait for external input“</p><p class=\"p1\" style=\"font-variant-numeric:\">Event Store (optional)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Speichert alle Events als unveränderliche Ereignisse</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Nützlich für Audit-Zwecke, Debugging, oder System-Wiederherstellung</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Ermöglicht „Event Replay“ → Wiederholung von Workflows aus der Historie</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Nur aktivieren, wenn langfristige Transparenz oder Nachvollziehbarkeit erforderlich ist</p><p class=\"p1\" style=\"font-variant-numeric:\">Schema Registry (optional)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Definiert und validiert die Struktur von Events</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Schützt Produzenten und Konsumenten vor inkompatiblen Änderungen</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Gut für Systeme mit mehreren Teams oder externen Anbindungen</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Kann manuell oder automatisiert gepflegt werden (z. B. JSON Schema)</p><p class=\"p1\" style=\"font-variant-numeric:\">Designprinzipien</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Entkopplung: Sender und Empfänger kennen sich nicht – hohe Flexibilität</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Fehlertoleranz: Wenn ein Empfänger ausfällt, geht der Sender trotzdem weiter</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Skalierbarkeit: Mehrere Empfänger können gleichzeitig auf ein Event reagieren</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Beobachtbarkeit: Logging + Event-Monitoring zeigen, was wann passiert ist</p><p class=\"p1\" style=\"font-variant-numeric:\">Testbarkeit</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Events können in Tests einfach simuliert oder gemockt werden</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Workflows sind unit- und integrationstestfähig</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>EventBus kann im Dev-Mode durch Memory-Implementierung ersetzt werden</p>" }
    n19@{ label: "<p class=\"p1\" style=\"font-variant-numeric:\">Saga Pattern – Verteilte TransaktionKontrolle</p><p class=\"p1\" style=\"font-variant-numeric:\">Grundidee</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Saga ist ein Muster zur Steuerung verteilter, langlaufender Transaktionen</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Jeder Schritt in der Saga ist ein eigenständiger Service-Call</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Wenn ein Schritt fehlschlägt, wird eine Kompensationsaktion ausgelöst (z. B. Rückerstattung)</p><p class=\"p1\" style=\"font-variant-numeric:\">Aufbau einer Saga</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Start erfolgt durch ein Ereignis (z. B. „Bestellung eingegangen“)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Jeder Schritt sendet entweder ein „OK“ oder ein „Fehler“-Event</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Wenn alles klappt → Workflow geht weiter</p><p class=\"p1\" style=\"font-variant-numeric:\">Wenn Fehler → Rückruf-Logik wird ausgelöst</p><p class=\"p1\" style=\"font-variant-numeric:\">Beispielprozess:</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>1.<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Service A → Zahlung buchen</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>2.<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Service B → Versand vorbereiten</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>3.<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Service C → Dokument erstellen</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>4.<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Wenn B fehlschlägt → A muss Rückzahlung ausführen (Kompensation)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>5.<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Wenn C fehlschlägt → B muss Versand abbrechen</p><p class=\"p1\" style=\"font-variant-numeric:\">Technische Umsetzung</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Kann über die Workflow Engine gesteuert werden</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Oder als verteilte, lose gekoppelte Event-Kette</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Jeder Service kennt nur seinen Vorher/Nachher-Schritt, nicht den ganzen Prozess</p><p class=\"p1\" style=\"font-variant-numeric:\">Vorteile</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Transaktionen bleiben asynchron und skalierbar</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Kein globaler Lock, keine Blockierung von Ressourcen</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Jeder Service bleibt unabhängig und testbar</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Ideal für Geschäftsprozesse wie „Visa-Erteilung“, „Onboarding“, „Vertragsfreigaben“</p><p class=\"p1\" style=\"font-variant-numeric:\">Herausforderungen</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Kompensation muss explizit geplant und implementiert werden</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Logging und Nachvollziehbarkeit sind kritisch</p><p class=\"p1\" style=\"font-variant-numeric:\">→ Lösung: EventStore oder Monitoring</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Komplexität steigt bei mehr als 3–4 Services im Ablauf</p><p class=\"p1\" style=\"font-variant-numeric:\">Sicherheit &amp; Fehlerhandling</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Jeder Step hat eigene Retry/Circuit-Logik</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Fehlerhafte Schritte landen in DLQ (Dead Letter Queue)</p><p class=\"p1\" style=\"font-variant-numeric:\"><span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>•<span class=\"Apple-tab-span\" style=\"white-space:\">\t</span>Optional: Alerting bei abgebrochener Saga</p>" }
    n7@{ shape: anchor}
    n1@{ shape: tag-proc}
    NoteFrontend@{ shape: tag-proc}
    n6@{ shape: anchor}
    n8@{ shape: anchor}
    n9@{ shape: anchor}
    n11@{ shape: anchor}
    n12@{ shape: anchor}
    n14@{ shape: anchor}
    n15@{ shape: anchor}
    n17@{ shape: anchor}
    n18@{ shape: anchor}
    n20@{ shape: anchor}
    n21@{ shape: anchor}
    n2@{ shape: tag-proc}
    n10@{ shape: tag-proc}
    n13@{ shape: tag-proc}
    n16@{ shape: tag-proc}
    n19@{ shape: tag-proc}
     Gateway:::Class_01
     n1:::noteStyle
     n1:::Ash
     NoteFrontend:::noteStyle
     NoteFrontend:::Ash
     n2:::noteStyle
     n2:::Ash
     n10:::noteStyle
     n10:::Ash
     n13:::noteStyle
     n13:::Ash
     n16:::noteStyle
     n16:::Ash
     n19:::noteStyle
     n19:::Ash
    classDef Ash stroke-width:1px, stroke-dasharray:none, stroke:#999999, fill:#EEEEEE, color:#000000
    classDef Class_01 stroke:#FF6D00
    style S5 fill:#00C853
    style Gateway fill:#BBDEFB
    style AllServices stroke:#FFD600
    style n1 color:#FFFFFF,fill:#BBDEFB,stroke:#FF6D00,stroke-width:4px,stroke-dasharray: 0
    style NoteFrontend color:#000000,fill:#FFCDD2,stroke:#FF6D00,stroke-width:4px,stroke-dasharray: 0
    style n2 color:#000000,fill:#FFFFFF,stroke:#D50000,stroke-width:4px,stroke-dasharray: 0
    style n10 color:#000000,fill:#FFFFFF,stroke:#FF6D00,stroke-width:4px,stroke-dasharray: 0
    style n13 color:#000000,fill:#FFFFFF,stroke:#00C853,stroke-width:4px,stroke-dasharray: 0
    style n16 color:#000000,fill:#C8E6C9,stroke:#00C853,stroke-width:4px,stroke-dasharray: 0
    style n19 color:#000000,fill:#FFFFFF,stroke:#2962FF,stroke-width:4px,stroke-dasharray: 0
    style Frontend_UI stroke:#FF6D00,fill:#FFCDD2
    style Security fill:#FFFFFF,stroke:#D50000
    style Microservices stroke:#FF6D00,fill:#FFFFFF
    style Databases stroke:#00C853
    style Automation stroke:#00C853,fill:#C8E6C9
    style ExecLogic stroke:#00C853,fill:#00C853
    style Saga stroke:#2962FF
    style Errors stroke:#2962FF
    style Monitoring stroke:#FFD600
    style CICD fill:#FFF9C4
    linkStyle 0 stroke:#BBDEFB,fill:none
    linkStyle 1 stroke:#BBDEFB,fill:none
    linkStyle 2 stroke:#BBDEFB,fill:none
    linkStyle 3 stroke:#BBDEFB,fill:none
    linkStyle 4 stroke:#D50000,fill:none
    linkStyle 5 stroke:#FF6D00,fill:none
    linkStyle 6 stroke:#FF6D00,fill:none
    linkStyle 7 stroke:#FF6D00,fill:none
    linkStyle 8 stroke:#FF6D00,fill:none
    linkStyle 11 stroke:#00C853,fill:none
    linkStyle 12 stroke:#AA00FF,fill:none
    linkStyle 13 stroke:#00C853,fill:none
    linkStyle 14 stroke:#00C853,fill:none
    linkStyle 15 stroke:#AA00FF,fill:none
    linkStyle 16 stroke:#00C853,fill:none
    linkStyle 17 stroke:#00C853,fill:none
    linkStyle 18 stroke:#FF6D00,fill:none
    linkStyle 19 stroke:#FF6D00,fill:none
    linkStyle 20 stroke:#AA00FF,fill:none
    linkStyle 21 stroke:#AA00FF,fill:none
    linkStyle 22 stroke:#00C853,fill:none
    linkStyle 23 stroke:#FF6D00,fill:none
    linkStyle 24 stroke:#FF6D00,fill:none
    linkStyle 25 stroke:#AA00FF,fill:none
    linkStyle 26 stroke:#AA00FF,fill:none
    linkStyle 27 stroke:#FF6D00,fill:none
    linkStyle 32 stroke:#FF6D00,fill:none
    linkStyle 33 stroke:#FF6D00,fill:none
    linkStyle 34 stroke:#FF6D00,fill:none
    linkStyle 37 stroke:#AA00FF,fill:none
    linkStyle 38 stroke:#D50000,fill:none
    linkStyle 40 stroke:#AA00FF,fill:none
    linkStyle 48 stroke:#BBDEFB,fill:none
    linkStyle 50 stroke:#D50000,fill:none
    linkStyle 51 stroke:#FF6D00,fill:none
    linkStyle 52 stroke:#00C853,fill:none
    linkStyle 53 stroke:#00C853,fill:none
    linkStyle 54 stroke:#2962FF,fill:none
